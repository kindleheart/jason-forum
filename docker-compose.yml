version: '3'
# 网络配置
networks:
  backend:
    driver: bridge

# 服务容器配置
services:
  etcd:
    image: bitnami/etcd
    environment:
      - TZ=Asia/Shanghai
      - ALLOW_NONE_AUTHENTICATION=yes
      - ETCD_ADVERTISE_CLIENT_URLS=http://etcd:2379
    ports:
      - "2379:2379"
    networks:
      - backend
    restart: always
  etcd-manage:
    image: evildecay/etcdkeeper
    environment:
      - TZ=Asia/Shanghai
    ports:
      - "8000:8080"
    depends_on:
      - etcd
    networks:
      - backend
    restart: always

  mysql:
    image: mysql
    environment:
      - TZ=Asia/Shanghai
      - MYSQL_ROOT_PASSWORD=123456 # 设置 Mysql root 用户密码
    command:
      - --default-authentication-plugin=mysql_native_password
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
    privileged: true
    volumes:
      - mysql_data:/var/lib/mysql        # 引用 .env 配置中 DATA_PATH_HOST 变量，将宿主机上存放 Mysql 数据的目录挂载到容器中 /var/lib/mysql 目录
    ports:
      - "3306:3306"                          # 设置容器3306端口映射指定宿主机端口
    networks:
      - backend
    restart: always

  redis:
    image: redis
    environment:
      - TZ=Asia/Shanghai
    privileged: true
    volumes:
      - redis_data:/data                 # 引用 .env 配置中 DATA_PATH_HOST 变量，将宿主机上存放 Redis 数据的目录挂载到容器中 /data 目录
    ports:
      - "6379:6379"                          # 设置容器6379端口映射指定宿主机端口
    networks:
      - backend
    restart: always

  redis-manage:
    image: erikdubbelboer/phpredisadmin
    environment:
      - TZ=Asia/Shanghai
      - ADMIN_USER=admin           # 设置 Redis 可视化管理的用户名称
      - ADMIN_PASS=123456           # 设置 Redis 可视化管理的用户密码
      - REDIS_1_HOST=redis     # 设置连接的 Redis 服务 host，可以是 Redis 服务容器的名称，也可以是 Redis 服务容器的 ip 地址
      - REDIS_1_PORT=6379     # 设置连接的 Redis 服务端口号
    ports:
      - "2000:80"                     # 设置容器80端口映射指定宿主机端口，用于宿主机访问可视化web
    depends_on:                                       # 依赖容器
      - redis                                         # 在 Redis 服务容器启动后启动
    networks:
      - backend
    restart: always

  kafka:
    image: 'bitnami/kafka'
    ports:
      - '9092:9092'
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://192.168.0.104:9092

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui
    ports:
      - 8080:8080
    depends_on:
      - kafka
    environment:
      DYNAMIC_CONFIG_ENABLED: "TRUE"

  prometheus:
    image: bitnami/prometheus
    environment:
      - TZ=Asia/Shanghai
    privileged: true
    volumes:
      - ./conf/prometheus.yml:/opt/bitnami/prometheus/conf/prometheus.yml  # 将 prometheus 配置文件挂载到容器里
    ports:
      - "9090:9090"                     # 设置容器9090端口映射指定宿主机端口，用于宿主机访问可视化web
    networks:
      - backend
    restart: always

  grafana:
    image: grafana/grafana
    environment:
      - TZ=Asia/Shanghai
    ports:
      - "3000:3000"                        # 设置容器3000端口映射指定宿主机端口，用于宿主机访问可视化web
    networks:
      - backend
    restart: always

  jaeger:
    image: jaegertracing/all-in-one
    environment:
      - TZ=Asia/Shanghai
    ports:
      - "16686:16686"                        # 设置容器16686端口映射指定宿主机端口，用于宿主机访问可视化web
    networks:
      - backend
    restart: always

  dtm:
    image: yedf/dtm
    environment:
      - TZ=Asia/Shanghai
      - STORE_DRIVER=mysql
      - STORE_HOST=localhost
      - STORE_USER=admin
      - STORE_PASSWORD=123456
      - STORE_PORT=3306
    ports:
      - '36789:36789'
      - '36790:36790'
    networks:
      - backend
    restart: always

volumes:
  mysql_data:
  redis_data:
